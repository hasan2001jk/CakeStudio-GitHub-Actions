name: CI_GitHub_Actions
on:
  workflow_run:
    workflows: ["Configuring the Infrastructure"]
    types:
      - completed


jobs:
  build:
      name: Build and analyze
      runs-on: ubuntu-latest
      if: ${{ github.event.workflow_run.conclusion == 'success' }}
      steps:
        - name: Git clone the repo
          uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: 17
            distribution: 'zulu' # Alternative distribution options are available.
        
        - name: Cache SonarCloud packages
          uses: actions/cache@v3
          with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
        
        - name: Cache Maven packages
          uses: actions/cache@v3
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        
        - name: Build database image for testing Application
          working-directory: ./application
          run: |
            docker build -t postgres:v4 -f ./Dockerfile2 .
        
        - name: Show images
          run : |
            docker images
        
        - name: Run the image of Database
          run : |
             docker run -d -p 5432:5432 -e POSTGRES_USER=user -e POSTGRES_PASSWORD=user -e POSTGRES_DB=CakeStudio postgres:v4
        
        - name: Generate Maven Wrapper folder
          working-directory: ./application
          run: |
            mvn -N io.takari:maven:wrapper
            chmod +x ./mvnw
            
        - name: Build and analyze (SonarCloud)
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_SONARCLOUD }}
            SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/CakeStudio"
            SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            SERVER_PORT: 80
            SPRING_MAIL_USERNAME: ${{ secrets.SPRING_MAIL_USERNAME }}
            SPRING_MAIL_PASSWORD: ${{ secrets.SPRING_MAIL_PASSWORD }}
            SPRING_PROFILES_ACTIVE: development
            MAVEN_OPTS: "-Xmx3000m"
          working-directory: ./application
          run: |
            mvn clean verify -Pcoverage
            ./mvnw -B verify sonar:sonar -Dsonar.projectKey=hasan2001jk_CakeStudio-GitHub-Actions -Dsonar.organization=hasan2001jk -Dsonar.host.url=https://sonarcloud.io -Pcoverage 

        - name: Build and analyze (SonarQube)
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_SONARQUBE }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
            SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/CakeStudio"
            SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            SERVER_PORT: 80
            SPRING_MAIL_USERNAME: ${{ secrets.SPRING_MAIL_USERNAME }}
            SPRING_MAIL_PASSWORD: ${{ secrets.SPRING_MAIL_PASSWORD }}
            SPRING_PROFILES_ACTIVE: development
            MAVEN_OPTS: "-Xmx3000m"
          working-directory: ./application
          run: |
            mvn clean verify -Pcoverage
            mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} -Dsonar.projectName=${{ secrets.PROJECT_NAME }}

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build docker image for application
          working-directory: ./application
          run: docker build -t my_app_img:v4 -f ./Dockerfile1 .

        - name: Tagging images 
          run: |
            docker tag postgres:v4 khasanabdurakhmanov/khasanabdurakhmanov-repo:db_v5
            docker tag my_app_img:v4 khasanabdurakhmanov/khasanabdurakhmanov-repo:app_v5

        - name: Pushing images to Docker-Hub
          run: |
            docker push khasanabdurakhmanov/khasanabdurakhmanov-repo:db_v5
            docker push khasanabdurakhmanov/khasanabdurakhmanov-repo:app_v5
  Jenkins:
    name: Sending to Jenkins
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          name: Inventory
          workflow: tofu_merge_master.yaml
          search_artifacts: true
          skip_unpack: false
          path: ./

      - name: ls inventory
        run: cat ./inventory
      
    
